generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  email          String      @unique
  password       String
  username       String      @unique
  birthdate      DateTime
  profile        UserProfile @relation(fields: [profileId], references: [id])
  profileId      Int
  favoriteGenres FavoriteGenre[] 
  createdAt      DateTime    @default(now())
  bookLists      BookList[] 
  comments       Comment[]   
  ratings       BookRating[] 
}

model UserProfile {
  id        Int    @id @default(autoincrement())
  bio       String? 
  User      User[]
}

model FavoriteGenre {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int
  User   User   @relation(fields: [userId], references: [id])
}

model Book {
  id        String           @id
  title     String
  authors   String
  image     String?
  description String?    
  categories String[]       
  averageRating Float?       
  BookListEntries BookListEntry[]
  comments        Comment[]       
  ratings         BookRating[]  
}

model BookRating {
  id        Int      @id @default(autoincrement())
  rating    Int     
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  createdAt DateTime @default(now())

  @@unique([userId, bookId]) 
}

model BookList {
  id        Int             @id @default(autoincrement())
  name      String
  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  entries   BookListEntry[]
  createdAt DateTime        @default(now())

  @@unique([name, userId])
}

model BookListEntry {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  bookList  BookList @relation(fields: [bookListId], references: [id])
  bookListId Int
  addedAt   DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
}

